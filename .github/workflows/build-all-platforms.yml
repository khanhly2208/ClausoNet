name: 🚀 Build ClausoNet 4.0 Pro - All Platforms

# Khi nào workflow này chạy?
on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  # Cho phép chạy manual
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

# Biến môi trường chung
env:
  PYTHON_VERSION: '3.11'
  PROJECT_NAME: 'ClausoNet 4.0 Pro'

jobs:
  # ==========================================
  # BUILD WINDOWS (EXE + Admin Tools)
  # ==========================================
  build-windows:
    name: 🪟 Windows Build
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install Windows dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller>=5.13.0
        pip install customtkinter>=5.2.0
        pip install selenium>=4.15.0
        pip install requests>=2.31.0
        pip install pillow>=10.0.0
        pip install beautifulsoup4 lxml certifi urllib3
        
    - name: 🔍 Verify installation
      run: |
        python --version
        pip list | findstr -i "pyinstaller customtkinter selenium"
        
    - name: 🏗️ Build Main Application (Windows EXE)
      working-directory: ClausoNet4.0
      run: |
        echo "Building ClausoNet 4.0 Pro for Windows..."
        python build_fixed_exe.py
        
    - name: 🔧 Build Admin Tools (Windows EXE)
      working-directory: ClausoNet4.0/admin_tools
      run: |
        echo "Building Admin Key Generator for Windows..."
        python build_admin_key_exe.py
        
    - name: 📋 List build outputs
      run: |
        echo "=== Main Application Build ==="
        dir ClausoNet4.0\dist
        echo "=== Admin Tools Build ==="
        dir ClausoNet4.0\admin_tools\admin_key_package
        
    - name: 📦 Package Windows builds
      run: |
        mkdir windows-release
        
        # Copy main application
        if (Test-Path "ClausoNet4.0\dist\ClausoNet4.0Pro.exe") {
          Copy-Item "ClausoNet4.0\dist\ClausoNet4.0Pro.exe" "windows-release\"
          echo "✅ Main app copied"
        }
        
        # Copy admin tools
        if (Test-Path "ClausoNet4.0\admin_tools\admin_key_package") {
          Copy-Item -Recurse "ClausoNet4.0\admin_tools\admin_key_package" "windows-release\admin_tools"
          echo "✅ Admin tools copied"
        }
        
        # Create README
        @"
        # ClausoNet 4.0 Pro - Windows Release
        
        ## Contents:
        - ClausoNet4.0Pro.exe - Main application
        - admin_tools/ - Admin key generator tools
        
        ## Installation:
        1. Run ClausoNet4.0Pro.exe for main application
        2. Run admin_tools/ClausoNet_AdminKeyGenerator.exe for admin functions
        
        Built on: $(Get-Date)
        Platform: Windows
        GitHub Actions Build
        "@ | Out-File -FilePath "windows-release\README.txt" -Encoding UTF8
        
    - name: 📤 Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: windows-release/
        retention-days: 30

  # ==========================================
  # BUILD MACOS (APP + Admin Tools)
  # ==========================================
  build-macos:
    name: 🍎 macOS Build
    runs-on: macos-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install macOS dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install pyinstaller>=5.13.0
        pip3 install customtkinter>=5.2.0
        pip3 install selenium>=4.15.0
        pip3 install requests>=2.31.0
        pip3 install pillow>=10.0.0
        pip3 install beautifulsoup4 lxml certifi urllib3
        
    - name: 🔍 Verify macOS tools
      run: |
        python3 --version
        which iconutil && echo "✅ iconutil found" || echo "⚠️ iconutil missing"
        which sips && echo "✅ sips found" || echo "⚠️ sips missing"  
        which hdiutil && echo "✅ hdiutil found" || echo "⚠️ hdiutil missing"
        pip3 list | grep -E "(pyinstaller|customtkinter|selenium)"
        
    - name: 🎨 Prepare assets for macOS
      working-directory: ClausoNet4.0
      run: |
        # Create assets directory if not exists
        mkdir -p assets
        
        # Create a simple icon if none exists
        if [ ! -f "assets/icon.png" ] && [ ! -f "assets/icon.icns" ]; then
          echo "Creating default icon..."
          python3 -c "
from PIL import Image, ImageDraw
img = Image.new('RGBA', (512, 512), (30, 144, 255, 255))
draw = ImageDraw.Draw(img)
draw.ellipse([50, 50, 462, 462], fill=(255, 255, 255, 255))
draw.ellipse([100, 100, 412, 412], fill=(30, 144, 255, 255))
draw.ellipse([200, 200, 312, 312], fill=(255, 255, 255, 255))
img.save('assets/icon.png')
print('✅ Default icon created')
" 2>/dev/null || echo "⚠️ Could not create icon, continuing..."
        fi
        
    - name: 🏗️ Build Main Application (macOS .app)
      working-directory: ClausoNet4.0
      run: |
        echo "🍎 Building ClausoNet 4.0 Pro for macOS..."
        python3 build_main_macos.py
        
    - name: 🔧 Build Admin Tools (macOS .app)
      working-directory: ClausoNet4.0/admin_tools
      run: |
        echo "🔧 Building Admin Key Generator for macOS..."
        python3 build_admin_key_macos.py
        
    - name: 💿 Create DMG files
      working-directory: ClausoNet4.0
      run: |
        echo "💿 Creating DMG files for distribution..."
        
        # Create DMG for main application
        if [ -d "dist/ClausoNet 4.0 Pro.app" ]; then
          hdiutil create -srcfolder "dist/ClausoNet 4.0 Pro.app" \
            -volname "ClausoNet 4.0 Pro" \
            -format UDZO \
            -imagekey zlib-level=9 \
            "ClausoNet-4.0-Pro-macOS.dmg"
          echo "✅ Main app DMG created"
        fi
        
        # Create DMG for admin tools
        if [ -d "admin_tools/admin_key_package_macos" ]; then
          hdiutil create -srcfolder "admin_tools/admin_key_package_macos" \
            -volname "ClausoNet Admin Tools" \
            -format UDZO \
            -imagekey zlib-level=9 \
            "ClausoNet-AdminTools-macOS.dmg"
          echo "✅ Admin tools DMG created"
        fi
        
    - name: 📋 List build outputs
      working-directory: ClausoNet4.0
      run: |
        echo "=== Main Application Build ==="
        ls -la dist/ || echo "No dist directory"
        echo "=== Admin Tools Build ==="
        ls -la admin_tools/admin_key_package_macos/ || echo "No admin tools build"
        echo "=== DMG Files ==="
        ls -la *.dmg || echo "No DMG files"
        
    - name: 📦 Package macOS builds
      working-directory: ClausoNet4.0
      run: |
        mkdir -p ../macos-release
        
        # Copy .app bundles
        if [ -d "dist/ClausoNet 4.0 Pro.app" ]; then
          cp -r "dist/ClausoNet 4.0 Pro.app" ../macos-release/
          echo "✅ Main app copied"
        fi
        
        if [ -d "admin_tools/admin_key_package_macos" ]; then
          cp -r "admin_tools/admin_key_package_macos" ../macos-release/admin_tools
          echo "✅ Admin tools copied"
        fi
        
        # Copy DMG files
        cp *.dmg ../macos-release/ 2>/dev/null || echo "⚠️ No DMG files to copy"
        
        # Create installation guide
        cat > ../macos-release/INSTALLATION_GUIDE.txt << 'EOF'
# ClausoNet 4.0 Pro - macOS Installation Guide

## Quick Installation:
1. Mount the DMG files by double-clicking them
2. Drag applications to your Applications folder
3. First run: Right-click → Open → Open anyway (security)

## Contents:
- ClausoNet 4.0 Pro.app - Main application
- admin_tools/ - Admin key generator tools
- *.dmg - Distribution disk images

## Security Notes:
If you see "App is damaged" or "Unidentified developer":
```bash
xattr -d com.apple.quarantine "ClausoNet 4.0 Pro.app"
```

## System Requirements:
- macOS 10.14+ (Mojave or later)
- 4GB+ RAM recommended
- 2GB+ free disk space

Built with GitHub Actions
Platform: macOS
Build Date: $(date)
EOF
        
    - name: 📤 Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: macos-release/
        retention-days: 30

  # ==========================================
  # CREATE RELEASE (if on main branch)
  # ==========================================
  create-release:
    name: 🎉 Create Release
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📅 Generate release info
      id: release_info
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "datetime=$(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "tag=v$(date +'%Y.%m.%d')-build.${{ github.run_number }}" >> $GITHUB_OUTPUT
        
    - name: 📥 Download Windows build
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: release-assets/windows/
        
    - name: 📥 Download macOS build  
      uses: actions/download-artifact@v4
      with:
        name: macos-build
        path: release-assets/macos/
        
    - name: 📦 Create release packages
      run: |
        cd release-assets
        
        # Create Windows ZIP
        cd windows && zip -r "../ClausoNet-4.0-Pro-Windows.zip" . && cd ..
        
        # Create macOS ZIP (backup to DMG)
        cd macos && zip -r "../ClausoNet-4.0-Pro-macOS.zip" . && cd ..
        
        # List final packages
        ls -la *.zip
        ls -la macos/*.dmg || echo "No DMG files"
        
    - name: 🏷️ Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.tag }}
        name: ClausoNet 4.0 Pro - ${{ steps.release_info.outputs.date }}
        body: |
          # 🚀 ClausoNet 4.0 Pro - Automated Build
          
          **Build Date:** ${{ steps.release_info.outputs.datetime }}  
          **Build Number:** ${{ github.run_number }}  
          **Commit:** ${{ github.sha }}
          
          ## 📦 Downloads
          
          ### Windows
          - `ClausoNet-4.0-Pro-Windows.zip` - Complete Windows package
            - Main application: `ClausoNet4.0Pro.exe`
            - Admin tools: `admin_tools/ClausoNet_AdminKeyGenerator.exe`
          
          ### macOS  
          - `ClausoNet-4.0-Pro-macOS.zip` - Complete macOS package
            - Main application: `ClausoNet 4.0 Pro.app`
            - Admin tools: `admin_tools/ClausoNet Admin Key Generator.app`
          - Individual DMG files available in macOS package
          
          ## 🔧 Installation
          
          ### Windows:
          1. Download and extract `ClausoNet-4.0-Pro-Windows.zip`
          2. Run `ClausoNet4.0Pro.exe`
          
          ### macOS:
          1. Download `ClausoNet-4.0-Pro-macOS.zip`
          2. Extract and run `.app` files
          3. First run: Right-click → Open → Open anyway
          
          ## ⚡ What's New
          - Cross-platform builds (Windows + macOS)
          - Automated CI/CD pipeline
          - Professional distribution packages
          - Comprehensive installation guides
          
          ---
          🤖 *This release was automatically generated by GitHub Actions*
        files: |
          release-assets/ClausoNet-4.0-Pro-Windows.zip
          release-assets/ClausoNet-4.0-Pro-macOS.zip
          release-assets/macos/*.dmg
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================
  # BUILD SUMMARY
  # ==========================================
  build-summary:
    name: 📊 Build Summary
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Generate build summary
      run: |
        echo "# 🚀 ClausoNet 4.0 Pro - Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status | Artifacts |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-windows.result }}" == "success" ]; then
          echo "| 🪟 Windows | ✅ Success | EXE + Admin Tools |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🪟 Windows | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-macos.result }}" == "success" ]; then
          echo "| 🍎 macOS | ✅ Success | .app + DMG + Admin Tools |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🍎 macOS | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📥 Download Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Go to **Actions** tab → This workflow run → **Artifacts** section" >> $GITHUB_STEP_SUMMARY
        echo "- Download `windows-build` and/or `macos-build`" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ github.event_name }}" == "push" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 Release Created" >> $GITHUB_STEP_SUMMARY
          echo "A new release has been automatically created with both platform builds!" >> $GITHUB_STEP_SUMMARY
        fi 